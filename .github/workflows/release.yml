name: Release and get the version

on:
  push:
    branches:
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions: write-all

    outputs:
      latestTag: ${{steps.latestTag.outputs.tag}}
      latestVersion: ${{steps.validVersion.outputs.version}}
      branchName: ${{steps.extract_branch.outputs.branch}}

    steps:
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          fetch-depth: 0

      - name: Extract branch name
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch

      - name: ReleasereleaseVersion based on branch
        uses: mehdi-ra/main-develop-semver@v1.6.0
        id: release
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          releaseTitle: Auto release

      - name: Get latest tag
        id: latestTag
        continue-on-error: true
        uses: oprypin/find-latest-tag@e1e0e606cc7e9ede25140a5a139b3a5a1b717ece
        with:
          releases-only: true
          repository: ${{ github.repository }}
          token: ${{secrets.GITHUB_TOKEN}}

      - name: Remove v before tag and output
        id: validVersion
        run: echo "version=$(echo ${{ steps.latestTag.outputs.tag }} | sed 's/^v//')" >> $GITHUB_OUTPUT

  docker-publish:
    runs-on: ubuntu-latest
    needs: release
    permissions: write-all ## For role back

    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: devopshobbies/uiLibrary-biolerplate
          tags: type=raw,value=${{ needs.release.outputs.latestVersion }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get latest tag
        id: latestTag
        continue-on-error: true
        uses: oprypin/find-latest-tag@e1e0e606cc7e9ede25140a5a139b3a5a1b717ece
        with:
          releases-only: true
          repository: ${{ github.repository }}
          token: ${{secrets.GITHUB_TOKEN}}

      - name: Build and publish latest
        uses: docker/build-push-action@v4
        if: needs.release.outputs.branchName == 'main'
        with:
          file: ./dockerfile.prod
          push: true
          tags: devopshobbies/${{ github.event.repository.name }}:latest

      - name: Build and publish prerelease
        uses: docker/build-push-action@v4
        if: needs.release.outputs.branchName == 'develop'
        with:
          file: ./dockerfile.dev
          push: true
          tags: devopshobbies/${{ github.event.repository.name }}:${{ needs.release.outputs.latestVersion }}

      - name: Rollback Release
        if: failure()
        uses: author/action-rollback@stable
        with:
          tag: ${{ needs.release.outputs.latestTag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    runs-on: ubuntu-latest
    permissions: write-all
    timeout-minutes: 5
    needs: [release]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Update version on package.json
        id: updateVersion
        run: npm version ${{needs.release.outputs.latestVersion}} --force --no-git-tag-version

      - name: Install husky
        run: npm install -g husky && husky install

      - name: NPM Publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}

  deployment:
    needs: [release, docker-publish]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Get Repository Name
        id: repoName
        run: echo "::set-output name=result::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"

      - name: Get generic version
        id: genericVersion
        run: |
          echo version=$(cat .helm/Chart.yaml | grep -o 'genericChartVersion: .*' | awk '{print $2}') >> $GITHUB_OUTPUT

      - name: Update image tag in values.yaml
        run: |

      - name: Install yq
        run: |
          sudo snap install yq

      - name: Extract branch name
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch

      - name: Update deployment.image.tag to latest on production
        if: steps.extract_branch.outputs.branch == 'main'
        run: |
          yq eval -i ".deployment.image.tag = \"latest\"" .helm/values.yaml

      - name: Update deployment.image.tag on staging
        if: steps.extract_branch.outputs.branch == 'develop'
        run: |
          yq eval -i ".deployment.image.tag = \"${{ needs.release.outputs.latestVersion }}\"" .helm/values.yaml

      - name: Helm Release on staging
        uses: devopshobbies/helm-releaser@v1.1.0
        if: steps.extract_branch.outputs.branch == 'develop'
        with:
          remoteRepository: ${{ vars.GENERIC_REPOSITORY }}
          chartName: "generic"
          releaseName: ${{ steps.repoName.outputs.result }}
          namespace: "uiLibrary"

          chartVersion: ${{ steps.genericVersion.outputs.version }}
          kubeConfig: ${{ secrets.KUBECONFIG }}
          context: "kind-uiLibrary-staging"

      - name: Helm Release on production
        uses: devopshobbies/helm-releaser@v1.1.0
        if: steps.extract_branch.outputs.branch == 'main'
        with:
          remoteRepository: ${{ vars.GENERIC_REPOSITORY }}
          chartName: "generic"
          releaseName: ${{ steps.repoName.outputs.result }}
          namespace: "uiLibrary"

          chartVersion: ${{ steps.genericVersion.outputs.version }}
          kubeConfig: ${{ secrets.KUBECONFIG }}
          context: "kind-uiLibrary-production"
