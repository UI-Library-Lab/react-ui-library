// vite.config.ts
import { resolve } from "node:path";
import { defineConfig } from "file:///C:/Home/dev/projects/ui-library/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Home/dev/projects/ui-library/node_modules/@vitejs/plugin-react/dist/index.mjs";

// package.json
var dependencies = {
  "@types/jest": "^29.5.1",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "vite-plugin-babel-macros": "^1.0.6"
};

// vite.config.ts
import tsConfigPaths from "file:///C:/Home/dev/projects/ui-library/node_modules/vite-tsconfig-paths/dist/index.mjs";
import dts from "file:///C:/Home/dev/projects/ui-library/node_modules/vite-plugin-dts/dist/index.mjs";
import EsLint from "file:///C:/Home/dev/projects/ui-library/node_modules/vite-plugin-linter/dist/index.js";
import macrosPlugin from "file:///C:/Home/dev/projects/ui-library/node_modules/vite-plugin-babel-macros/dist/plugin.js";
var { EsLinter, linterPlugin } = EsLint;
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    macrosPlugin(),
    react({
      babel: {
        plugins: [
          [
            "babel-plugin-styled-components",
            {
              pure: true,
              namespace: "uiLibrary"
            }
          ]
        ]
      }
    }),
    tsConfigPaths(),
    dts({
      insertTypesEntry: true,
      include: ["src/"]
    }),
    linterPlugin({
      include: ["./src/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    })
  ],
  server: {
    host: true
  },
  build: {
    lib: {
      entry: resolve("src", "index.ts"),
      name: "Ui LibrarygStorybook",
      formats: ["es", "umd"],
      fileName: (format) => `uiLibrary-storybook.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(dependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcSG9tZVxcXFxkZXZcXFxccHJvamVjdHNcXFxcdWktbGlicmFyeVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcSG9tZVxcXFxkZXZcXFxccHJvamVjdHNcXFxcdWktbGlicmFyeVxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovSG9tZS9kZXYvcHJvamVjdHMvdWktbGlicmFyeS92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdub2RlOnBhdGgnXHJcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjtcclxuaW1wb3J0ICogYXMgcGFja2FnZUpzb24gZnJvbSAnLi9wYWNrYWdlLmpzb24nO1xyXG5pbXBvcnQgdHNDb25maWdQYXRocyBmcm9tICd2aXRlLXRzY29uZmlnLXBhdGhzJ1xyXG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cydcclxuaW1wb3J0IEVzTGludCBmcm9tICd2aXRlLXBsdWdpbi1saW50ZXInXHJcbmltcG9ydCBtYWNyb3NQbHVnaW4gZnJvbSBcInZpdGUtcGx1Z2luLWJhYmVsLW1hY3Jvc1wiXHJcblxyXG5jb25zdCB7IEVzTGludGVyLCBsaW50ZXJQbHVnaW4gfSA9IEVzTGludFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKChjb25maWdFbnYpID0+ICh7XHJcbiAgcGx1Z2luczogW1xyXG4gICAgbWFjcm9zUGx1Z2luKCksXHJcbiAgICByZWFjdCh7XHJcbiAgICAgIGJhYmVsOiB7XHJcbiAgICAgICAgcGx1Z2luczogW1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICAnYmFiZWwtcGx1Z2luLXN0eWxlZC1jb21wb25lbnRzJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHB1cmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgbmFtZXNwYWNlOiBcInVpTGlicmFyeVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIH0pLCBcclxuICAgIHRzQ29uZmlnUGF0aHMoKSxcclxuICAgIGR0cyh7XHJcbiAgICAgIGluc2VydFR5cGVzRW50cnk6IHRydWUsXHJcbiAgICAgIGluY2x1ZGU6IFsnc3JjLyddLFxyXG4gICAgfSksXHJcbiAgICBsaW50ZXJQbHVnaW4oe1xyXG4gICAgICBpbmNsdWRlOiBbJy4vc3JjLyoqLyoue3RzLHRzeH0nXSxcclxuICAgICAgbGludGVyczogW25ldyBFc0xpbnRlcih7IGNvbmZpZ0VudiB9KV0sXHJcbiAgICB9KSxcclxuICBdLFxyXG4gIHNlcnZlcjoge1xyXG4gICAgaG9zdDogdHJ1ZSxcclxuICB9LFxyXG4gIGJ1aWxkOiB7XHJcbiAgICBsaWI6IHtcclxuICAgICAgZW50cnk6IHJlc29sdmUoJ3NyYycsICdpbmRleC50cycpLFxyXG4gICAgICBuYW1lOiAnVWkgTGlicmFyeWdTdG9yeWJvb2snLFxyXG4gICAgICBmb3JtYXRzOiBbJ2VzJywgJ3VtZCddLFxyXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYHVpTGlicmFyeS1zdG9yeWJvb2suJHtmb3JtYXR9LmpzYCxcclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24uZGVwZW5kZW5jaWVzKV1cclxuICAgIH1cclxuICB9XHJcbn0pKTsiLCAie1xyXG4gIFwibmFtZVwiOiBcIkB1aS1saWJyYXJ5LWxhYi91aS1saWJyYXJ5LXN0b3J5Ym9va1wiLFxyXG4gIFwidmVyc2lvblwiOiBcIjAuMC4xXCIsXHJcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXHJcbiAgXCJzY3JpcHRzXCI6IHtcclxuICAgIFwibGludFwiOiBcImVzbGludCAtLWZpeCAtLWlnbm9yZS1wYXRoIC5lc2xpbnRpZ25vcmUgLS1pZ25vcmUtcGF0dGVybiBcXFwiISoqLy4qXFxcIiAuXCIsXHJcbiAgICBcInN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBkZXYgLXAgNjAwNiAtLW5vLW9wZW5cIixcclxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXHJcbiAgICBcInByZWRlcGxveVwiOiBcInN0b3J5Ym9vayBidWlsZFwiLFxyXG4gICAgXCJidWlsZFwiOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXHJcbiAgICBcInRlc3RcIjogXCJqZXN0XCIsXHJcbiAgICBcInRzY1wiOiBcInRzY1wiXHJcbiAgfSxcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiXHJcbiAgXSxcclxuICBcImV4cG9ydHNcIjoge1xyXG4gICAgXCIuXCI6IHtcclxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvdWlMaWJyYXJ5LXN0b3J5Ym9vay5lcy5qc1wiLFxyXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvdWlMaWJyYXJ5LXN0b3J5Ym9vay51bWQuanNcIlxyXG4gICAgfSxcclxuICAgIFwiLi9kaXN0L3N0eWxlLmNzc1wiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIlxyXG4gIH0sXHJcbiAgXCJtYWluXCI6IFwiLi9kaXN0L3VpTGlicmFyeS1zdG9yeWJvb2sudW1kLmpzXCIsXHJcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvdWlMaWJyYXJ5LXN0b3J5Ym9vay5lcy5qc1wiLFxyXG4gIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxyXG4gIFwicmVwb3NpdG9yeVwiOiB7XHJcbiAgICBcInR5cGVcIjogXCJnaXRcIixcclxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3VpTGlicmFyeS1pby91aUxpYnJhcnktc3Rvcnlib29rXCJcclxuICB9LFxyXG4gIFwiYXV0aG9yXCI6IFwiZGV2b3BzLWhvYmJpZXNcIixcclxuICBcImtleXdvcmRzXCI6IFtcclxuICAgIFwiY29tcG9uZW50LWxpYnJhcnlcIixcclxuICAgIFwicmVhY3RcIixcclxuICAgIFwicmVhY3QtY29tcG9uZW50XCIsXHJcbiAgICBcImRldm9wc2hvYmJpZXNcIixcclxuICAgIFwidWlMaWJyYXJ5XCJcclxuICBdLFxyXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxyXG4gIFwicmVzb2x1dGlvbnNcIjoge1xyXG4gICAgXCJzdHJpcC1hbnNpXCI6IFwiNi4wLjFcIixcclxuICAgIFwiamFja3NwZWFrXCI6IFwiMi4xLjFcIlxyXG4gIH0sXHJcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAdHlwZXMvamVzdFwiOiBcIl4yOS41LjFcIixcclxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwidml0ZS1wbHVnaW4tYmFiZWwtbWFjcm9zXCI6IFwiXjEuMC42XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQGJhYmVsL2NvcmVcIjogXCJeNy4yMS40XCIsXHJcbiAgICBcIkBiYWJlbC9wcmVzZXQtZW52XCI6IFwiXjcuMjAuMlwiLFxyXG4gICAgXCJAYmFiZWwvcHJlc2V0LXJlYWN0XCI6IFwiXjcuMTguNlwiLFxyXG4gICAgXCJAYmFiZWwvcHJlc2V0LXR5cGVzY3JpcHRcIjogXCJeNy4yMS4wXCIsXHJcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tZXNzZW50aWFsc1wiOiBcIjcuNi43XCIsXHJcbiAgICBcIkBzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zXCI6IFwiNy42LjdcIixcclxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1saW5rc1wiOiBcIjcuNi43XCIsXHJcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZ1wiOiBcIjEuMC4xMFwiLFxyXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLXBvc3Rjc3NcIjogXCJeMi4wLjBcIixcclxuICAgIFwiQHN0b3J5Ym9vay9ibG9ja3NcIjogXCI3LjYuN1wiLFxyXG4gICAgXCJAc3Rvcnlib29rL2J1aWxkZXItdml0ZVwiOiBcIl43LjYuN1wiLFxyXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0XCI6IFwiNy42LjdcIixcclxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdC12aXRlXCI6IFwiNy42LjdcIixcclxuICAgIFwiQHN0b3J5Ym9vay90ZXN0XCI6IFwiNy42LjdcIixcclxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMTguMTUuMTFcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjAuMjhcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4wLjExXCIsXHJcbiAgICBcIkB0eXBlcy9zdHlsZWQtY29tcG9uZW50c1wiOiBcIl41LjEuMjZcIixcclxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNS41NC4xXCIsXHJcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNS41NC4xXCIsXHJcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjMuMS4wXCIsXHJcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjE0XCIsXHJcbiAgICBcImJhYmVsLWxvYWRlclwiOiBcIl44LjMuMFwiLFxyXG4gICAgXCJiYWJlbC1wbHVnaW4tc3R5bGVkLWNvbXBvbmVudHNcIjogXCJeMi4xLjNcIixcclxuICAgIFwiYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS1pbXBvcnQtbWV0YVwiOiBcIl4yLjIuMFwiLFxyXG4gICAgXCJlc2xpbnRcIjogXCJeOC4zNy4wXCIsXHJcbiAgICBcImVzbGludC1jb25maWctYWlyYm5iXCI6IFwiXjE5LjAuNFwiLFxyXG4gICAgXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjguNy4wXCIsXHJcbiAgICBcImVzbGludC1pbXBvcnQtcmVzb2x2ZXItYWxpYXNcIjogXCJeMS4xLjJcIixcclxuICAgIFwiZXNsaW50LWltcG9ydC1yZXNvbHZlci10eXBlc2NyaXB0XCI6IFwiXjMuNS41XCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4taW1wb3J0XCI6IFwiXjIuMjcuNVwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLWpzeC1hMTF5XCI6IFwiXjYuNy4xXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcHJldHRpZXJcIjogXCJeNC4yLjFcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdFwiOiBcIl43LjMyLjJcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC42LjEzXCIsXHJcbiAgICBcImh0bWwtd2VicGFjay1wbHVnaW5cIjogXCJeNS41LjNcIixcclxuICAgIFwicG9zdGNzc1wiOiBcIl44LjQuMjNcIixcclxuICAgIFwicHJldHRpZXJcIjogXCJeMi44LjRcIixcclxuICAgIFwicHJldHRpZXItZXNsaW50XCI6IFwiXjE1LjAuMVwiLFxyXG4gICAgXCJzdG9yeWJvb2tcIjogXCI3LjYuN1wiLFxyXG4gICAgXCJzdG9yeWJvb2stYWRkb24tZGVzaWduc1wiOiBcIl42LjMuMVwiLFxyXG4gICAgXCJzdG9yeWJvb2stZGFyay1tb2RlXCI6IFwiXjMuMC4xXCIsXHJcbiAgICBcInN0eWxlZC1jb21wb25lbnRzXCI6IFwiXjUuMy44XCIsXHJcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNC45LjNcIixcclxuICAgIFwidml0ZVwiOiBcIl40LjIuMFwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMi4yLjBcIixcclxuICAgIFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMC4yXCIsXHJcbiAgICBcInZpdGUtdHNjb25maWctcGF0aHNcIjogXCJeNC4wLjhcIlxyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXlSLFNBQVMsZUFBZTtBQUNqVCxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFdBQVc7OztBQ3lDaEIsbUJBQWdCO0FBQUEsRUFDZCxlQUFlO0FBQUEsRUFDZixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYiw0QkFBNEI7QUFDOUI7OztBRDVDRixPQUFPLG1CQUFtQjtBQUMxQixPQUFPLFNBQVM7QUFDaEIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sa0JBQWtCO0FBRXpCLElBQU0sRUFBRSxVQUFVLGFBQWEsSUFBSTtBQUVuQyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxlQUFlO0FBQUEsRUFDMUMsU0FBUztBQUFBLElBQ1AsYUFBYTtBQUFBLElBQ2IsTUFBTTtBQUFBLE1BQ0osT0FBTztBQUFBLFFBQ0wsU0FBUztBQUFBLFVBQ1A7QUFBQSxZQUNFO0FBQUEsWUFDQTtBQUFBLGNBQ0UsTUFBTTtBQUFBLGNBQ04sV0FBVztBQUFBLFlBQ2I7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFBQSxJQUNELGNBQWM7QUFBQSxJQUNkLElBQUk7QUFBQSxNQUNGLGtCQUFrQjtBQUFBLE1BQ2xCLFNBQVMsQ0FBQyxNQUFNO0FBQUEsSUFDbEIsQ0FBQztBQUFBLElBQ0QsYUFBYTtBQUFBLE1BQ1gsU0FBUyxDQUFDLHFCQUFxQjtBQUFBLE1BQy9CLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixNQUFNO0FBQUEsRUFDUjtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTyxRQUFRLE9BQU8sVUFBVTtBQUFBLE1BQ2hDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyx1QkFBdUIsTUFBTTtBQUFBLElBQ3JEO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsR0FBRyxPQUFPLEtBQWlCLFlBQVksQ0FBQztBQUFBLElBQ3JEO0FBQUEsRUFDRjtBQUNGLEVBQUU7IiwKICAibmFtZXMiOiBbXQp9Cg==
